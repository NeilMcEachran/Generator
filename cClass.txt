Option Explicit On

Namespace Generated

Public Class @SINGULARNAME@

	Private Const _ErrorBase as int32 = vbObjectError + @RANDOMNUMBER@
	Private Const _modName as string = "Rules.@SINGULARNAME@" 

	Private _@SINGULARNAME@ID As @IDFIELDTYPE@
	$Private _@FIELD@ As @FIELDTYPE@
	$Private _@LASTFIELD@ As @LASTFIELDTYPE@

	Public Sub New()

	End Sub

	public Shared function RetrieveDataSet(ByVal my@SINGULARNAME@ID As @IDFIELDTYPE@) As DataSet

		Using dbConn=New Data.Connection
			
			Dim ds As DataSet
	    
			ds = dbConn.RunSPReturnDS("Select@SINGULARNAME@", _
					New Object() {mp("@@SINGULARNAME@ID", @adIDFIELDTYPE@, @adIDFIELDLENGTH@, my@SINGULARNAME@ID)})

			Dim dr As DataTableReader
			dr = ds.CreateDataReader()

			If dr.HasRows Then
				RetrieveDataSet = ds
			Else
				RetrieveDataSet = Nothing
			End If

		End Using

	End Function

	Public Function Retrieve(ByVal my@SINGULARNAME@ID As @IDFIELDTYPE@) As Long

		Using dbConn=New Data.Connection


			Dim ds As DataSet
	    
			ds = dbConn.RunSPReturnDS("Select@SINGULARNAME@", _
					New Object() {mp("@@SINGULARNAME@ID", @adIDFIELDTYPE@, @adIDFIELDLENGTH@, my@SINGULARNAME@ID)})

				Dim dr As DataTableReader
				dr = ds.CreateDataReader()

				If dr.HasRows Then
                	dr.Read()

				_@IDPREF@@SINGULARNAME@ID = CLng(dr("@SINGULARNAME@ID"))
		$        _@PREF@@FIELD@ = @STRICTLY@(@NULLTOWHAT@(dr("@FIELD@")))
		$        _@LASTPREF@@LASTFIELD@ = @STRICTLY@(@LASTNULLTOWHAT@(dr("@LASTFIELD@")))
		
			End If

			if dr.HasRows then
    				Retrieve = CLng(dr("@SINGULARNAME@ID"))
			else
				Retrieve = 0
			end if

		End Using

	End Function

	Public ReadOnly Property @SINGULARNAME@ID() As @IDFIELDTYPE@
		Get
			@SINGULARNAME@ID = _@IDPREF@@SINGULARNAME@ID
		End Get
	End Property

	$Public Property @FIELD@() As @FIELDTYPE@
		Get
			@FIELD@ = _@PREF@@FIELD@
		End Get
		Set (byval my@FIELD@ As @FIELDTYPE@)
			_@PREF@@FIELD@ = my@FIELD@
		end Set
	End Property

	$Public Property @LASTFIELD@() As @LASTFIELDTYPE@
		Get
			@LASTFIELD@ = _@LASTPREF@@LASTFIELD@
		End Get
		Set (byval my@LASTFIELD@ As @LASTFIELDTYPE@)
			_@LASTPREF@@LASTFIELD@ = my@LASTFIELD@
		End Set
	End Property

	Public Function Insert($ByVal my@FIELD@ As @FIELDTYPE@, $ ByVal my@LASTFIELD@ As @LASTFIELDTYPE@) AS Long

		Using dbConn=New Data.Connection

			Insert = dbConn.RunSPReturnInteger("Insert@SINGULARNAME@", _
					New Object() {$ mp("@@FIELD@", @adFIELDTYPE@, @adFIELDLENGTH@, @WHATTONULL@(my@FIELD@)), _ 
				   $ mp("@@LASTFIELD@", @adLASTFIELDTYPE@, @adLASTFIELDLENGTH@, @LASTWHATTONULL@(my@LASTFIELD@))})

			Return Insert
		
		End Using

	End Function

	Public Function Update() As Long

		Using dbConn=New Data.Connection

			Update = dbConn.RunSPReturnInteger("Edit@SINGULARNAME@", _
				New Object() {mp("@@SINGULARNAME@ID", @adIDFIELDTYPE@, @adIDFIELDLENGTH@, _@IDPREF@@SINGULARNAME@ID), _
				$ mp("@@FIELD@", @adFIELDTYPE@, @adFIELDLENGTH@, @WHATTONULL@(_@PREF@@FIELD@)), _ 
				$ mp("@@LASTFIELD@", @adLASTFIELDTYPE@, @adLASTFIELDLENGTH@, @LASTWHATTONULL@(_@LASTPREF@@LASTFIELD@))})

		Return Update
		
		End Using
	
	End Function

	Public Function Delete(ByVal my@SINGULARNAME@ID As @IDFIELDTYPE@) As Boolean

		Using dbConn=New Data.Connection

			Retrieve (my@SINGULARNAME@ID)

			Delete = CBool(dbConn.RunSPReturnInteger("Delete@SINGULARNAME@", _
					New Object() {mp("@@SINGULARNAME@ID", @adIDFIELDTYPE@, @adIDFIELDLENGTH@, my@SINGULARNAME@ID)}))

		Return Delete

		End Using

	End Function

End Class

End Namespace